Criação de aplicativo em PHP usando MVC

O router é um dos componentes principais de aplicativos com MVC. Neste usarei um Router que simplifiquei partindo do Router do mini-framework, que veio do mini3.

Estarei também usando autoload com PSR-4 e composer

Namespace - Mvc
Pasta - src

Usarei muita coisa tipo o mini3:

.htaccess
/public/index.php
/src/config.php
/src/bootstrap.php
/src/Core/Router.php

Usarei apenas uma tabela: clientes    

Após criar a estrutura acima e rodar nno raiz
composer dumpautoload

Chamei pelo nnavegador

http://localhost/fw_mvc

Ele reclama do ClientesController.

Vou começar apenas com o action index() do ClientesController.

Avançando

/src/Controller
/src/Model
/src/View

ClientesController.php

<?php

declare(strict_types = 1);

namespace Mvc\Controller;
use Mvc\Model\ClientesModel;
use Mvc\Core\View;

class ClientesController
{

    public function index()
    {
        $Cliente = new ClientesModel();
        $clientes = $Cliente->todosClientes();// Todos os clientes vindos do model

		$view = new View();
		$view->render('clientes','index', $clientes);
    }

}

Ao chamar agora ele pede o ClientesModel.php. Criarei também com somente o método index()

<?php
declare(strict_types = 1);

namespace Mvc\Model;
use Mvc\Core\Model;

class ClientesModel extends Model
{
    public function todosClientes()
    {
        $sql = 'SELECT id, nome, email FROM clientes ORDER BY id DESC';
        $query = $this->db->prepare($sql);
        $query->execute();

        return $query->fetchAll();
    }
}

Ao rodar agora eme pede o Model.php de Core

<?php

declare(strict_types = 1);

namespace Mvc\Core;
use PDO;

class Model
{
    public $db = null;
    function __construct()
    {
        try {
            self::openDatabaseConnection();
        } catch (\PDOException $e) {
            exit('Erro ao conectar ao banco de dados.');
        }
    }

    private function openDatabaseConnection()
    {
        $options = array(PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_OBJ, PDO::ATTR_ERRMODE => PDO::ERRMODE_WARNING);

		$dsn = DB_TYPE . ':host=' . DB_HOST . ';port ='. DB_PORT . ';dbname=' . DB_NAME;// . $databaseEncodingenc;
        $this->db = new PDO($dsn , DB_USER, DB_PASS, $options);
    }
}

Rodando agora ele pede a View em Core

<?php
declare(strict_types = 1);
namespace Mvc\Core;

class View
{
    // controller, action (vindos do Router), $clientes vindo do model
	public function render($controller, $action, $clientes=null){
        require SRC . 'template/_templates/header.php';
        require SRC . 'template/'.$controller.'/'.$action.'.php';
        require SRC . 'template/_templates/footer.php';
	}

}

Rodando agora ele pede template/_templates/header.php. Criando:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title><?=APP_TITTLE?></title>
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <!-- CSS from BootStrap -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
        integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
        <link href="<?php echo URL; ?>css/custom.css" rel="stylesheet">                
</head>
<body>
    <div align="center"><h1><?=APP_TITTLE?></h1></div>
	<div class="container">
		<!-- MENU -->
		<nav class="navbar-expand bg-dark navbar-dark">
			<ul class="navbar-nav justify-content-center">
			  <li class="nav-item">
				<a class="nav-link" href="<?php echo URL; ?>clientes">Clientes</a>
			  </li>
			</ul>
		</nav>
	</div>

Rodando agora ele reclama da view: template/clientes/index.php

<div class="container">
    <h2 class="text-center">Clientes</h2>
    <div>
        <br>        
        <b>Lista de Clientes (dados do model)</b>
        <table class="table table-hover table-stripped">
            <thead>
            <tr class="bg-gray">
                <td><b>ID</b></td>
                <td><b>Nome</b></td>
                <td><b>E-mail</b></td>
            </tr>
            </thead>
            <tbody>
            <?php foreach ($clientes as $cliente) { ?>
                <tr>
                    <td><?php if (isset($cliente->id)) echo htmlspecialchars($cliente->id, ENT_QUOTES, 'UTF-8'); ?></td>
                    <td><?php if (isset($cliente->nome)) echo htmlspecialchars($cliente->nome, ENT_QUOTES, 'UTF-8'); ?></td>
                    <td><?php if (isset($cliente->email)) echo htmlspecialchars($cliente->email, ENT_QUOTES, 'UTF-8'); ?></td>
                </tr>
            <?php } ?>
            </tbody>
        </table>
    </div>
</div>

Rodando agora ele já lista os registros na index.php, mas ao final reclama do template/_template/footer.php:

<div class="container bg-gray">
    <div align="center">
        Aplicativo criado tendo como base o <a href="https://github.com/panique/mini3">MINI3 adaptado por Ribamar FS</a>.
    </div>
</div>
</body>
</html>

Está concluido mas uma boa ideia é adicionar o Controller/ErrorController.php.

<?php
declare(strict_types = 1);
namespace Mvc\Controller;

class ErrorController
{
    public function index($controller = null, $action = null)
    {
        // load views
        require SRC . 'template/_templates/header.php';
        require SRC . 'template/error/index.php';
        require SRC . 'template/_templates/footer.php';
    }
}



Testando:

Agoa sua view: template/error/index.php

<br><br>
<div class="container text-danger">
    <h3 align="center">Este controller e/ou action <b>( <?=$controller.'/'.$action?> )</b> não existe.</h3>
</div>
<br><br><br><br>

Testando:

http://localhost/fw_mvc/teste

O ErrorController é chamado e dispara:
Este controller e/ou action ( TesteController/index ) não existe.

Após ajustes o Router.php ficou assim:

<?php
declare(strict_types = 1);
namespace Mvc\Core;

class Router
{
    private $urlController = null;
    private $urlAction = null;
    private $urlParams = array();

    public function __construct()
    {
        if (isset($_GET['url'])) {

            // Quebrar a URL em pedaços: url[0] - urlController e url[1] - urlAction
            $url = trim($_GET['url'], '/');
            $url = filter_var($url, FILTER_SANITIZE_URL);
            $url = explode('/', $url); // dividir a url em pedaços entre as barras

            $this->urlController = isset($url[0]) ? $url[0] : null;
            $this->urlAction = isset($url[1]) ? $url[1] : 'index';// era null no original

            unset($url[0], $url[1]);
            $this->urlParams = array_values($url);
        }

        if (!$this->urlController) {// Caso não seja encontrado chame o default
			$controllerDefault = '\\Mvc\\Controller\\' . CONTROLLER_DEFAULT . 'Controller';
			$page = new $controllerDefault;
            $page->index();

        } elseif (file_exists(SRC . 'Controller/' . ucfirst($this->urlController) . 'Controller.php')) {
            $controller = '\\Mvc\\Controller\\' . ucfirst($this->urlController) . 'Controller';
            $this->urlController = new $controller();

            if (method_exists($this->urlController, $this->urlAction) && is_callable(array($this->urlController, $this->urlAction))) {
                
				// Checar se parâmetros não estão vazios
                if (!empty($this->urlParams)) {
                    // Se existir chame o método e passe os argumentos para ele
                    call_user_func_array(array($this->urlController, $this->urlAction), $this->urlParams);
                } else {
                    // Se nenhum parâmetro for informado, apenas chame método sem parameteros, como $this->home->method();
                    $this->urlController->{$this->urlAction}();
                }

			// Se nenhum método for encontrado
            } else {
                if (strlen($this->urlAction) == 0) {
                    // Nenhum action definido: chame o default index() do controller selecionado
                    $this->urlController->index();

				// Caso contrário chame ErrorController
                } else {
					$action = $this->urlAction;
					$contr = explode('\\',$controller);
                    $page = new \Mvc\Controller\ErrorController();
                    $page->index($contr[3],$action);// Alterei para ser mais explícito. Era somente assim: $page->index();
                }
            }   
        } else {
            // Caso contrário chame o controller de erros
			$controller = $this->urlController;
			$action = $this->urlAction;
            $page = new \Mvc\Controller\ErrorController();
            $page->index(ucfirst($controller).'Controller',$action); // Alterei para ser mais explícito. Era somente assim: $page->index();
        }
    }
}
    
